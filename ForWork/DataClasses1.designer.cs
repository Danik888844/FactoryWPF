#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForWork
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FactoryDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertFactory(Factory instance);
    partial void UpdateFactory(Factory instance);
    partial void DeleteFactory(Factory instance);
    partial void InsertGild(Gild instance);
    partial void UpdateGild(Gild instance);
    partial void DeleteGild(Gild instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertBrigade(Brigade instance);
    partial void UpdateBrigade(Brigade instance);
    partial void DeleteBrigade(Brigade instance);
    partial void InsertBrigadeShift(BrigadeShift instance);
    partial void UpdateBrigadeShift(BrigadeShift instance);
    partial void DeleteBrigadeShift(BrigadeShift instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCityGildEmployee(CityGildEmployee instance);
    partial void UpdateCityGildEmployee(CityGildEmployee instance);
    partial void DeleteCityGildEmployee(CityGildEmployee instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ForWork.Properties.Settings.Default.FactoryDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Factory> Factory
		{
			get
			{
				return this.GetTable<Factory>();
			}
		}
		
		public System.Data.Linq.Table<Gild> Gild
		{
			get
			{
				return this.GetTable<Gild>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Brigade> Brigade
		{
			get
			{
				return this.GetTable<Brigade>();
			}
		}
		
		public System.Data.Linq.Table<BrigadeShift> BrigadeShift
		{
			get
			{
				return this.GetTable<BrigadeShift>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<CityGildEmployee> CityGildEmployee
		{
			get
			{
				return this.GetTable<CityGildEmployee>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Factory")]
	public partial class Factory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _GildID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _BrigadeShiftID;
		
		private System.Nullable<int> _BrigadeID;
		
		private EntityRef<Gild> _Gild;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Brigade> _Brigade;
		
		private EntityRef<BrigadeShift> _BrigadeShift;
		
		private EntityRef<City> _City;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGildIDChanging(System.Nullable<int> value);
    partial void OnGildIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnBrigadeShiftIDChanging(System.Nullable<int> value);
    partial void OnBrigadeShiftIDChanged();
    partial void OnBrigadeIDChanging(System.Nullable<int> value);
    partial void OnBrigadeIDChanged();
    #endregion
		
		public Factory()
		{
			this._Gild = default(EntityRef<Gild>);
			this._Employee = default(EntityRef<Employee>);
			this._Brigade = default(EntityRef<Brigade>);
			this._BrigadeShift = default(EntityRef<BrigadeShift>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GildID", DbType="Int")]
		public System.Nullable<int> GildID
		{
			get
			{
				return this._GildID;
			}
			set
			{
				if ((this._GildID != value))
				{
					if (this._Gild.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGildIDChanging(value);
					this.SendPropertyChanging();
					this._GildID = value;
					this.SendPropertyChanged("GildID");
					this.OnGildIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrigadeShiftID", DbType="Int")]
		public System.Nullable<int> BrigadeShiftID
		{
			get
			{
				return this._BrigadeShiftID;
			}
			set
			{
				if ((this._BrigadeShiftID != value))
				{
					if (this._BrigadeShift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrigadeShiftIDChanging(value);
					this.SendPropertyChanging();
					this._BrigadeShiftID = value;
					this.SendPropertyChanged("BrigadeShiftID");
					this.OnBrigadeShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrigadeID", DbType="Int")]
		public System.Nullable<int> BrigadeID
		{
			get
			{
				return this._BrigadeID;
			}
			set
			{
				if ((this._BrigadeID != value))
				{
					if (this._Brigade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrigadeIDChanging(value);
					this.SendPropertyChanging();
					this._BrigadeID = value;
					this.SendPropertyChanged("BrigadeID");
					this.OnBrigadeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gild_Factory", Storage="_Gild", ThisKey="GildID", OtherKey="GildID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Gild Gild
		{
			get
			{
				return this._Gild.Entity;
			}
			set
			{
				Gild previousValue = this._Gild.Entity;
				if (((previousValue != value) 
							|| (this._Gild.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gild.Entity = null;
						previousValue.Factory.Remove(this);
					}
					this._Gild.Entity = value;
					if ((value != null))
					{
						value.Factory.Add(this);
						this._GildID = value.GildID;
					}
					else
					{
						this._GildID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gild");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Factory", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Factory.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Factory.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brigade_Factory", Storage="_Brigade", ThisKey="BrigadeID", OtherKey="BrigadeID", IsForeignKey=true)]
		public Brigade Brigade
		{
			get
			{
				return this._Brigade.Entity;
			}
			set
			{
				Brigade previousValue = this._Brigade.Entity;
				if (((previousValue != value) 
							|| (this._Brigade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brigade.Entity = null;
						previousValue.Factory.Remove(this);
					}
					this._Brigade.Entity = value;
					if ((value != null))
					{
						value.Factory.Add(this);
						this._BrigadeID = value.BrigadeID;
					}
					else
					{
						this._BrigadeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Brigade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrigadeShift_Factory", Storage="_BrigadeShift", ThisKey="BrigadeShiftID", OtherKey="BrigadeShiftID", IsForeignKey=true)]
		public BrigadeShift BrigadeShift
		{
			get
			{
				return this._BrigadeShift.Entity;
			}
			set
			{
				BrigadeShift previousValue = this._BrigadeShift.Entity;
				if (((previousValue != value) 
							|| (this._BrigadeShift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrigadeShift.Entity = null;
						previousValue.Factory.Remove(this);
					}
					this._BrigadeShift.Entity = value;
					if ((value != null))
					{
						value.Factory.Add(this);
						this._BrigadeShiftID = value.BrigadeShiftID;
					}
					else
					{
						this._BrigadeShiftID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BrigadeShift");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Factory", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Factory.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Factory.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gild")]
	public partial class Gild : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GildID;
		
		private string _GildName;
		
		private EntitySet<Factory> _Factory;
		
		private EntitySet<CityGildEmployee> _CityGildEmployee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGildIDChanging(int value);
    partial void OnGildIDChanged();
    partial void OnGildNameChanging(string value);
    partial void OnGildNameChanged();
    #endregion
		
		public Gild()
		{
			this._Factory = new EntitySet<Factory>(new Action<Factory>(this.attach_Factory), new Action<Factory>(this.detach_Factory));
			this._CityGildEmployee = new EntitySet<CityGildEmployee>(new Action<CityGildEmployee>(this.attach_CityGildEmployee), new Action<CityGildEmployee>(this.detach_CityGildEmployee));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GildID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GildID
		{
			get
			{
				return this._GildID;
			}
			set
			{
				if ((this._GildID != value))
				{
					this.OnGildIDChanging(value);
					this.SendPropertyChanging();
					this._GildID = value;
					this.SendPropertyChanged("GildID");
					this.OnGildIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GildName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GildName
		{
			get
			{
				return this._GildName;
			}
			set
			{
				if ((this._GildName != value))
				{
					this.OnGildNameChanging(value);
					this.SendPropertyChanging();
					this._GildName = value;
					this.SendPropertyChanged("GildName");
					this.OnGildNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gild_Factory", Storage="_Factory", ThisKey="GildID", OtherKey="GildID")]
		public EntitySet<Factory> Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				this._Factory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gild_CityGildEmployee", Storage="_CityGildEmployee", ThisKey="GildID", OtherKey="GildID")]
		public EntitySet<CityGildEmployee> CityGildEmployee
		{
			get
			{
				return this._CityGildEmployee;
			}
			set
			{
				this._CityGildEmployee.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Gild = this;
		}
		
		private void detach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Gild = null;
		}
		
		private void attach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Gild = this;
		}
		
		private void detach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Gild = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _FullName;
		
		private EntitySet<Factory> _Factory;
		
		private EntitySet<CityGildEmployee> _CityGildEmployee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public Employee()
		{
			this._Factory = new EntitySet<Factory>(new Action<Factory>(this.attach_Factory), new Action<Factory>(this.detach_Factory));
			this._CityGildEmployee = new EntitySet<CityGildEmployee>(new Action<CityGildEmployee>(this.attach_CityGildEmployee), new Action<CityGildEmployee>(this.detach_CityGildEmployee));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Factory", Storage="_Factory", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Factory> Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				this._Factory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CityGildEmployee", Storage="_CityGildEmployee", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<CityGildEmployee> CityGildEmployee
		{
			get
			{
				return this._CityGildEmployee;
			}
			set
			{
				this._CityGildEmployee.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brigade")]
	public partial class Brigade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrigadeID;
		
		private string _BrigadeName;
		
		private EntitySet<Factory> _Factory;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrigadeIDChanging(int value);
    partial void OnBrigadeIDChanged();
    partial void OnBrigadeNameChanging(string value);
    partial void OnBrigadeNameChanged();
    #endregion
		
		public Brigade()
		{
			this._Factory = new EntitySet<Factory>(new Action<Factory>(this.attach_Factory), new Action<Factory>(this.detach_Factory));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrigadeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrigadeID
		{
			get
			{
				return this._BrigadeID;
			}
			set
			{
				if ((this._BrigadeID != value))
				{
					this.OnBrigadeIDChanging(value);
					this.SendPropertyChanging();
					this._BrigadeID = value;
					this.SendPropertyChanged("BrigadeID");
					this.OnBrigadeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrigadeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string BrigadeName
		{
			get
			{
				return this._BrigadeName;
			}
			set
			{
				if ((this._BrigadeName != value))
				{
					this.OnBrigadeNameChanging(value);
					this.SendPropertyChanging();
					this._BrigadeName = value;
					this.SendPropertyChanged("BrigadeName");
					this.OnBrigadeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brigade_Factory", Storage="_Factory", ThisKey="BrigadeID", OtherKey="BrigadeID")]
		public EntitySet<Factory> Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				this._Factory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Brigade = this;
		}
		
		private void detach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.Brigade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrigadeShift")]
	public partial class BrigadeShift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrigadeShiftID;
		
		private string _ShiftName;
		
		private EntitySet<Factory> _Factory;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrigadeShiftIDChanging(int value);
    partial void OnBrigadeShiftIDChanged();
    partial void OnShiftNameChanging(string value);
    partial void OnShiftNameChanged();
    #endregion
		
		public BrigadeShift()
		{
			this._Factory = new EntitySet<Factory>(new Action<Factory>(this.attach_Factory), new Action<Factory>(this.detach_Factory));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrigadeShiftID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrigadeShiftID
		{
			get
			{
				return this._BrigadeShiftID;
			}
			set
			{
				if ((this._BrigadeShiftID != value))
				{
					this.OnBrigadeShiftIDChanging(value);
					this.SendPropertyChanging();
					this._BrigadeShiftID = value;
					this.SendPropertyChanged("BrigadeShiftID");
					this.OnBrigadeShiftIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ShiftName
		{
			get
			{
				return this._ShiftName;
			}
			set
			{
				if ((this._ShiftName != value))
				{
					this.OnShiftNameChanging(value);
					this.SendPropertyChanging();
					this._ShiftName = value;
					this.SendPropertyChanged("ShiftName");
					this.OnShiftNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrigadeShift_Factory", Storage="_Factory", ThisKey="BrigadeShiftID", OtherKey="BrigadeShiftID")]
		public EntitySet<Factory> Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				this._Factory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.BrigadeShift = this;
		}
		
		private void detach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.BrigadeShift = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private EntitySet<Factory> _Factory;
		
		private EntitySet<CityGildEmployee> _CityGildEmployee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public City()
		{
			this._Factory = new EntitySet<Factory>(new Action<Factory>(this.attach_Factory), new Action<Factory>(this.detach_Factory));
			this._CityGildEmployee = new EntitySet<CityGildEmployee>(new Action<CityGildEmployee>(this.attach_CityGildEmployee), new Action<CityGildEmployee>(this.detach_CityGildEmployee));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Factory", Storage="_Factory", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Factory> Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				this._Factory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityGildEmployee", Storage="_CityGildEmployee", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<CityGildEmployee> CityGildEmployee
		{
			get
			{
				return this._CityGildEmployee;
			}
			set
			{
				this._CityGildEmployee.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Factory(Factory entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_CityGildEmployee(CityGildEmployee entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityGildEmployee")]
	public partial class CityGildEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _GildID;
		
		private System.Nullable<int> _EmployeeID;
		
		private EntityRef<City> _City;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Gild> _Gild;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnGildIDChanging(System.Nullable<int> value);
    partial void OnGildIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public CityGildEmployee()
		{
			this._City = default(EntityRef<City>);
			this._Employee = default(EntityRef<Employee>);
			this._Gild = default(EntityRef<Gild>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GildID", DbType="Int")]
		public System.Nullable<int> GildID
		{
			get
			{
				return this._GildID;
			}
			set
			{
				if ((this._GildID != value))
				{
					if (this._Gild.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGildIDChanging(value);
					this.SendPropertyChanging();
					this._GildID = value;
					this.SendPropertyChanged("GildID");
					this.OnGildIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityGildEmployee", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.CityGildEmployee.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.CityGildEmployee.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CityGildEmployee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CityGildEmployee.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CityGildEmployee.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gild_CityGildEmployee", Storage="_Gild", ThisKey="GildID", OtherKey="GildID", IsForeignKey=true)]
		public Gild Gild
		{
			get
			{
				return this._Gild.Entity;
			}
			set
			{
				Gild previousValue = this._Gild.Entity;
				if (((previousValue != value) 
							|| (this._Gild.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gild.Entity = null;
						previousValue.CityGildEmployee.Remove(this);
					}
					this._Gild.Entity = value;
					if ((value != null))
					{
						value.CityGildEmployee.Add(this);
						this._GildID = value.GildID;
					}
					else
					{
						this._GildID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gild");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
